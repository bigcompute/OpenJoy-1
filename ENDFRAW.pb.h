// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ENDFRAW.proto

#ifndef PROTOBUF_ENDFRAW_2eproto__INCLUDED
#define PROTOBUF_ENDFRAW_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace endf {
namespace raw {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ENDFRAW_2eproto();
void protobuf_AssignDesc_ENDFRAW_2eproto();
void protobuf_ShutdownFile_ENDFRAW_2eproto();

class TableInterpLaw;
class TableDataPoint;
class Table;
class BreitWigner;
class ReichMoore;
class Momentum;
class Range;
class Resonance;
class NeutronData;

// ===================================================================

class TableInterpLaw : public ::google::protobuf::Message {
 public:
  TableInterpLaw();
  virtual ~TableInterpLaw();

  TableInterpLaw(const TableInterpLaw& from);

  inline TableInterpLaw& operator=(const TableInterpLaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInterpLaw& default_instance();

  void Swap(TableInterpLaw* other);

  // implements Message ----------------------------------------------

  TableInterpLaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableInterpLaw& from);
  void MergeFrom(const TableInterpLaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 INT = 1;
  inline bool has_int_() const;
  inline void clear_int_();
  static const int kINTFieldNumber = 1;
  inline ::google::protobuf::int64 int_() const;
  inline void set_int_(::google::protobuf::int64 value);

  // required int64 NBT = 2;
  inline bool has_nbt() const;
  inline void clear_nbt();
  static const int kNBTFieldNumber = 2;
  inline ::google::protobuf::int64 nbt() const;
  inline void set_nbt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.endf.raw.TableInterpLaw)
 private:
  inline void set_has_int_();
  inline void clear_has_int_();
  inline void set_has_nbt();
  inline void clear_has_nbt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 int__;
  ::google::protobuf::int64 nbt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static TableInterpLaw* default_instance_;
};
// -------------------------------------------------------------------

class TableDataPoint : public ::google::protobuf::Message {
 public:
  TableDataPoint();
  virtual ~TableDataPoint();

  TableDataPoint(const TableDataPoint& from);

  inline TableDataPoint& operator=(const TableDataPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDataPoint& default_instance();

  void Swap(TableDataPoint* other);

  // implements Message ----------------------------------------------

  TableDataPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableDataPoint& from);
  void MergeFrom(const TableDataPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:proto.endf.raw.TableDataPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static TableDataPoint* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
  inline int interp_laws_size() const;
  inline void clear_interp_laws();
  static const int kInterpLawsFieldNumber = 1;
  inline const ::proto::endf::raw::TableInterpLaw& interp_laws(int index) const;
  inline ::proto::endf::raw::TableInterpLaw* mutable_interp_laws(int index);
  inline ::proto::endf::raw::TableInterpLaw* add_interp_laws();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableInterpLaw >&
      interp_laws() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableInterpLaw >*
      mutable_interp_laws();

  // repeated .proto.endf.raw.TableDataPoint data_points = 2;
  inline int data_points_size() const;
  inline void clear_data_points();
  static const int kDataPointsFieldNumber = 2;
  inline const ::proto::endf::raw::TableDataPoint& data_points(int index) const;
  inline ::proto::endf::raw::TableDataPoint* mutable_data_points(int index);
  inline ::proto::endf::raw::TableDataPoint* add_data_points();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableDataPoint >&
      data_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableDataPoint >*
      mutable_data_points();

  // @@protoc_insertion_point(class_scope:proto.endf.raw.Table)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableInterpLaw > interp_laws_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableDataPoint > data_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class BreitWigner : public ::google::protobuf::Message {
 public:
  BreitWigner();
  virtual ~BreitWigner();

  BreitWigner(const BreitWigner& from);

  inline BreitWigner& operator=(const BreitWigner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BreitWigner& default_instance();

  void Swap(BreitWigner* other);

  // implements Message ----------------------------------------------

  BreitWigner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BreitWigner& from);
  void MergeFrom(const BreitWigner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ER = 1;
  inline bool has_er() const;
  inline void clear_er();
  static const int kERFieldNumber = 1;
  inline double er() const;
  inline void set_er(double value);

  // required double AJ = 2;
  inline bool has_aj() const;
  inline void clear_aj();
  static const int kAJFieldNumber = 2;
  inline double aj() const;
  inline void set_aj(double value);

  // required double GT = 3;
  inline bool has_gt() const;
  inline void clear_gt();
  static const int kGTFieldNumber = 3;
  inline double gt() const;
  inline void set_gt(double value);

  // required double GN = 4;
  inline bool has_gn() const;
  inline void clear_gn();
  static const int kGNFieldNumber = 4;
  inline double gn() const;
  inline void set_gn(double value);

  // required double GG = 5;
  inline bool has_gg() const;
  inline void clear_gg();
  static const int kGGFieldNumber = 5;
  inline double gg() const;
  inline void set_gg(double value);

  // required double GF = 6;
  inline bool has_gf() const;
  inline void clear_gf();
  static const int kGFFieldNumber = 6;
  inline double gf() const;
  inline void set_gf(double value);

  // @@protoc_insertion_point(class_scope:proto.endf.raw.BreitWigner)
 private:
  inline void set_has_er();
  inline void clear_has_er();
  inline void set_has_aj();
  inline void clear_has_aj();
  inline void set_has_gt();
  inline void clear_has_gt();
  inline void set_has_gn();
  inline void clear_has_gn();
  inline void set_has_gg();
  inline void clear_has_gg();
  inline void set_has_gf();
  inline void clear_has_gf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double er_;
  double aj_;
  double gt_;
  double gn_;
  double gg_;
  double gf_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static BreitWigner* default_instance_;
};
// -------------------------------------------------------------------

class ReichMoore : public ::google::protobuf::Message {
 public:
  ReichMoore();
  virtual ~ReichMoore();

  ReichMoore(const ReichMoore& from);

  inline ReichMoore& operator=(const ReichMoore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReichMoore& default_instance();

  void Swap(ReichMoore* other);

  // implements Message ----------------------------------------------

  ReichMoore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReichMoore& from);
  void MergeFrom(const ReichMoore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ER = 1;
  inline bool has_er() const;
  inline void clear_er();
  static const int kERFieldNumber = 1;
  inline double er() const;
  inline void set_er(double value);

  // required double AJ = 2;
  inline bool has_aj() const;
  inline void clear_aj();
  static const int kAJFieldNumber = 2;
  inline double aj() const;
  inline void set_aj(double value);

  // required double GN = 3;
  inline bool has_gn() const;
  inline void clear_gn();
  static const int kGNFieldNumber = 3;
  inline double gn() const;
  inline void set_gn(double value);

  // required double GG = 4;
  inline bool has_gg() const;
  inline void clear_gg();
  static const int kGGFieldNumber = 4;
  inline double gg() const;
  inline void set_gg(double value);

  // required double GFA = 5;
  inline bool has_gfa() const;
  inline void clear_gfa();
  static const int kGFAFieldNumber = 5;
  inline double gfa() const;
  inline void set_gfa(double value);

  // required double GFB = 6;
  inline bool has_gfb() const;
  inline void clear_gfb();
  static const int kGFBFieldNumber = 6;
  inline double gfb() const;
  inline void set_gfb(double value);

  // @@protoc_insertion_point(class_scope:proto.endf.raw.ReichMoore)
 private:
  inline void set_has_er();
  inline void clear_has_er();
  inline void set_has_aj();
  inline void clear_has_aj();
  inline void set_has_gn();
  inline void clear_has_gn();
  inline void set_has_gg();
  inline void clear_has_gg();
  inline void set_has_gfa();
  inline void clear_has_gfa();
  inline void set_has_gfb();
  inline void clear_has_gfb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double er_;
  double aj_;
  double gn_;
  double gg_;
  double gfa_;
  double gfb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static ReichMoore* default_instance_;
};
// -------------------------------------------------------------------

class Momentum : public ::google::protobuf::Message {
 public:
  Momentum();
  virtual ~Momentum();

  Momentum(const Momentum& from);

  inline Momentum& operator=(const Momentum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Momentum& default_instance();

  void Swap(Momentum* other);

  // implements Message ----------------------------------------------

  Momentum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Momentum& from);
  void MergeFrom(const Momentum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double AWRI = 1;
  inline bool has_awri() const;
  inline void clear_awri();
  static const int kAWRIFieldNumber = 1;
  inline double awri() const;
  inline void set_awri(double value);

  // required double QX = 2;
  inline bool has_qx() const;
  inline void clear_qx();
  static const int kQXFieldNumber = 2;
  inline double qx() const;
  inline void set_qx(double value);

  // required double L = 3;
  inline bool has_l() const;
  inline void clear_l();
  static const int kLFieldNumber = 3;
  inline double l() const;
  inline void set_l(double value);

  // required int64 LRX = 4;
  inline bool has_lrx() const;
  inline void clear_lrx();
  static const int kLRXFieldNumber = 4;
  inline ::google::protobuf::int64 lrx() const;
  inline void set_lrx(::google::protobuf::int64 value);

  // required double APL = 5;
  inline bool has_apl() const;
  inline void clear_apl();
  static const int kAPLFieldNumber = 5;
  inline double apl() const;
  inline void set_apl(double value);

  // repeated .proto.endf.raw.BreitWigner BWTables = 6;
  inline int bwtables_size() const;
  inline void clear_bwtables();
  static const int kBWTablesFieldNumber = 6;
  inline const ::proto::endf::raw::BreitWigner& bwtables(int index) const;
  inline ::proto::endf::raw::BreitWigner* mutable_bwtables(int index);
  inline ::proto::endf::raw::BreitWigner* add_bwtables();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::BreitWigner >&
      bwtables() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::BreitWigner >*
      mutable_bwtables();

  // repeated .proto.endf.raw.ReichMoore RMTables = 7;
  inline int rmtables_size() const;
  inline void clear_rmtables();
  static const int kRMTablesFieldNumber = 7;
  inline const ::proto::endf::raw::ReichMoore& rmtables(int index) const;
  inline ::proto::endf::raw::ReichMoore* mutable_rmtables(int index);
  inline ::proto::endf::raw::ReichMoore* add_rmtables();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::ReichMoore >&
      rmtables() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::ReichMoore >*
      mutable_rmtables();

  // @@protoc_insertion_point(class_scope:proto.endf.raw.Momentum)
 private:
  inline void set_has_awri();
  inline void clear_has_awri();
  inline void set_has_qx();
  inline void clear_has_qx();
  inline void set_has_l();
  inline void clear_has_l();
  inline void set_has_lrx();
  inline void clear_has_lrx();
  inline void set_has_apl();
  inline void clear_has_apl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double awri_;
  double qx_;
  double l_;
  ::google::protobuf::int64 lrx_;
  double apl_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::BreitWigner > bwtables_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::ReichMoore > rmtables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static Momentum* default_instance_;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double EL = 1;
  inline bool has_el() const;
  inline void clear_el();
  static const int kELFieldNumber = 1;
  inline double el() const;
  inline void set_el(double value);

  // required double EH = 2;
  inline bool has_eh() const;
  inline void clear_eh();
  static const int kEHFieldNumber = 2;
  inline double eh() const;
  inline void set_eh(double value);

  // required int64 LRU = 3;
  inline bool has_lru() const;
  inline void clear_lru();
  static const int kLRUFieldNumber = 3;
  inline ::google::protobuf::int64 lru() const;
  inline void set_lru(::google::protobuf::int64 value);

  // required int64 LRF = 4;
  inline bool has_lrf() const;
  inline void clear_lrf();
  static const int kLRFFieldNumber = 4;
  inline ::google::protobuf::int64 lrf() const;
  inline void set_lrf(::google::protobuf::int64 value);

  // required int64 NRO = 5;
  inline bool has_nro() const;
  inline void clear_nro();
  static const int kNROFieldNumber = 5;
  inline ::google::protobuf::int64 nro() const;
  inline void set_nro(::google::protobuf::int64 value);

  // required int64 NAPS = 6;
  inline bool has_naps() const;
  inline void clear_naps();
  static const int kNAPSFieldNumber = 6;
  inline ::google::protobuf::int64 naps() const;
  inline void set_naps(::google::protobuf::int64 value);

  // required double SPI = 11;
  inline bool has_spi() const;
  inline void clear_spi();
  static const int kSPIFieldNumber = 11;
  inline double spi() const;
  inline void set_spi(double value);

  // required double AP = 12;
  inline bool has_ap() const;
  inline void clear_ap();
  static const int kAPFieldNumber = 12;
  inline double ap() const;
  inline void set_ap(double value);

  // required .proto.endf.raw.Table APE = 13;
  inline bool has_ape() const;
  inline void clear_ape();
  static const int kAPEFieldNumber = 13;
  inline const ::proto::endf::raw::Table& ape() const;
  inline ::proto::endf::raw::Table* mutable_ape();
  inline ::proto::endf::raw::Table* release_ape();
  inline void set_allocated_ape(::proto::endf::raw::Table* ape);

  // required int64 LAD = 14;
  inline bool has_lad() const;
  inline void clear_lad();
  static const int kLADFieldNumber = 14;
  inline ::google::protobuf::int64 lad() const;
  inline void set_lad(::google::protobuf::int64 value);

  // required int64 NLSC = 15;
  inline bool has_nlsc() const;
  inline void clear_nlsc();
  static const int kNLSCFieldNumber = 15;
  inline ::google::protobuf::int64 nlsc() const;
  inline void set_nlsc(::google::protobuf::int64 value);

  // required int64 LI = 21;
  inline bool has_li() const;
  inline void clear_li();
  static const int kLIFieldNumber = 21;
  inline ::google::protobuf::int64 li() const;
  inline void set_li(::google::protobuf::int64 value);

  // required int64 NX = 22;
  inline bool has_nx() const;
  inline void clear_nx();
  static const int kNXFieldNumber = 22;
  inline ::google::protobuf::int64 nx() const;
  inline void set_nx(::google::protobuf::int64 value);

  // required double AWRI = 23;
  inline bool has_awri() const;
  inline void clear_awri();
  static const int kAWRIFieldNumber = 23;
  inline double awri() const;
  inline void set_awri(double value);

  // required int64 LSSF = 31;
  inline bool has_lssf() const;
  inline void clear_lssf();
  static const int kLSSFFieldNumber = 31;
  inline ::google::protobuf::int64 lssf() const;
  inline void set_lssf(::google::protobuf::int64 value);

  // repeated double URRBES = 32;
  inline int urrbes_size() const;
  inline void clear_urrbes();
  static const int kURRBESFieldNumber = 32;
  inline double urrbes(int index) const;
  inline void set_urrbes(int index, double value);
  inline void add_urrbes(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      urrbes() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_urrbes();

  // repeated .proto.endf.raw.Momentum moments = 61;
  inline int moments_size() const;
  inline void clear_moments();
  static const int kMomentsFieldNumber = 61;
  inline const ::proto::endf::raw::Momentum& moments(int index) const;
  inline ::proto::endf::raw::Momentum* mutable_moments(int index);
  inline ::proto::endf::raw::Momentum* add_moments();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Momentum >&
      moments() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Momentum >*
      mutable_moments();

  // @@protoc_insertion_point(class_scope:proto.endf.raw.Range)
 private:
  inline void set_has_el();
  inline void clear_has_el();
  inline void set_has_eh();
  inline void clear_has_eh();
  inline void set_has_lru();
  inline void clear_has_lru();
  inline void set_has_lrf();
  inline void clear_has_lrf();
  inline void set_has_nro();
  inline void clear_has_nro();
  inline void set_has_naps();
  inline void clear_has_naps();
  inline void set_has_spi();
  inline void clear_has_spi();
  inline void set_has_ap();
  inline void clear_has_ap();
  inline void set_has_ape();
  inline void clear_has_ape();
  inline void set_has_lad();
  inline void clear_has_lad();
  inline void set_has_nlsc();
  inline void clear_has_nlsc();
  inline void set_has_li();
  inline void clear_has_li();
  inline void set_has_nx();
  inline void clear_has_nx();
  inline void set_has_awri();
  inline void clear_has_awri();
  inline void set_has_lssf();
  inline void clear_has_lssf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double el_;
  double eh_;
  ::google::protobuf::int64 lru_;
  ::google::protobuf::int64 lrf_;
  ::google::protobuf::int64 nro_;
  ::google::protobuf::int64 naps_;
  double spi_;
  double ap_;
  ::proto::endf::raw::Table* ape_;
  ::google::protobuf::int64 lad_;
  ::google::protobuf::int64 nlsc_;
  ::google::protobuf::int64 li_;
  ::google::protobuf::int64 nx_;
  double awri_;
  ::google::protobuf::int64 lssf_;
  ::google::protobuf::RepeatedField< double > urrbes_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Momentum > moments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// -------------------------------------------------------------------

class Resonance : public ::google::protobuf::Message {
 public:
  Resonance();
  virtual ~Resonance();

  Resonance(const Resonance& from);

  inline Resonance& operator=(const Resonance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resonance& default_instance();

  void Swap(Resonance* other);

  // implements Message ----------------------------------------------

  Resonance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resonance& from);
  void MergeFrom(const Resonance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ZAI = 1;
  inline bool has_zai() const;
  inline void clear_zai();
  static const int kZAIFieldNumber = 1;
  inline ::google::protobuf::int64 zai() const;
  inline void set_zai(::google::protobuf::int64 value);

  // required double ABN = 2;
  inline bool has_abn() const;
  inline void clear_abn();
  static const int kABNFieldNumber = 2;
  inline double abn() const;
  inline void set_abn(double value);

  // required int64 LFW = 3;
  inline bool has_lfw() const;
  inline void clear_lfw();
  static const int kLFWFieldNumber = 3;
  inline ::google::protobuf::int64 lfw() const;
  inline void set_lfw(::google::protobuf::int64 value);

  // repeated .proto.endf.raw.Range ranges = 8;
  inline int ranges_size() const;
  inline void clear_ranges();
  static const int kRangesFieldNumber = 8;
  inline const ::proto::endf::raw::Range& ranges(int index) const;
  inline ::proto::endf::raw::Range* mutable_ranges(int index);
  inline ::proto::endf::raw::Range* add_ranges();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Range >&
      ranges() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Range >*
      mutable_ranges();

  // @@protoc_insertion_point(class_scope:proto.endf.raw.Resonance)
 private:
  inline void set_has_zai();
  inline void clear_has_zai();
  inline void set_has_abn();
  inline void clear_has_abn();
  inline void set_has_lfw();
  inline void clear_has_lfw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 zai_;
  double abn_;
  ::google::protobuf::int64 lfw_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Range > ranges_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static Resonance* default_instance_;
};
// -------------------------------------------------------------------

class NeutronData : public ::google::protobuf::Message {
 public:
  NeutronData();
  virtual ~NeutronData();

  NeutronData(const NeutronData& from);

  inline NeutronData& operator=(const NeutronData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeutronData& default_instance();

  void Swap(NeutronData* other);

  // implements Message ----------------------------------------------

  NeutronData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeutronData& from);
  void MergeFrom(const NeutronData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ZA = 1;
  inline bool has_za() const;
  inline void clear_za();
  static const int kZAFieldNumber = 1;
  inline ::google::protobuf::int64 za() const;
  inline void set_za(::google::protobuf::int64 value);

  // required double AWR = 2;
  inline bool has_awr() const;
  inline void clear_awr();
  static const int kAWRFieldNumber = 2;
  inline double awr() const;
  inline void set_awr(double value);

  // required double TEMPK = 3;
  inline bool has_tempk() const;
  inline void clear_tempk();
  static const int kTEMPKFieldNumber = 3;
  inline double tempk() const;
  inline void set_tempk(double value);

  // repeated .proto.endf.raw.Resonance resonances = 8;
  inline int resonances_size() const;
  inline void clear_resonances();
  static const int kResonancesFieldNumber = 8;
  inline const ::proto::endf::raw::Resonance& resonances(int index) const;
  inline ::proto::endf::raw::Resonance* mutable_resonances(int index);
  inline ::proto::endf::raw::Resonance* add_resonances();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Resonance >&
      resonances() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Resonance >*
      mutable_resonances();

  // @@protoc_insertion_point(class_scope:proto.endf.raw.NeutronData)
 private:
  inline void set_has_za();
  inline void clear_has_za();
  inline void set_has_awr();
  inline void clear_has_awr();
  inline void set_has_tempk();
  inline void clear_has_tempk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 za_;
  double awr_;
  double tempk_;
  ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Resonance > resonances_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ENDFRAW_2eproto();
  friend void protobuf_AssignDesc_ENDFRAW_2eproto();
  friend void protobuf_ShutdownFile_ENDFRAW_2eproto();

  void InitAsDefaultInstance();
  static NeutronData* default_instance_;
};
// ===================================================================


// ===================================================================

// TableInterpLaw

// required int64 INT = 1;
inline bool TableInterpLaw::has_int_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableInterpLaw::set_has_int_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableInterpLaw::clear_has_int_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableInterpLaw::clear_int_() {
  int__ = GOOGLE_LONGLONG(0);
  clear_has_int_();
}
inline ::google::protobuf::int64 TableInterpLaw::int_() const {
  return int__;
}
inline void TableInterpLaw::set_int_(::google::protobuf::int64 value) {
  set_has_int_();
  int__ = value;
}

// required int64 NBT = 2;
inline bool TableInterpLaw::has_nbt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableInterpLaw::set_has_nbt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableInterpLaw::clear_has_nbt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableInterpLaw::clear_nbt() {
  nbt_ = GOOGLE_LONGLONG(0);
  clear_has_nbt();
}
inline ::google::protobuf::int64 TableInterpLaw::nbt() const {
  return nbt_;
}
inline void TableInterpLaw::set_nbt(::google::protobuf::int64 value) {
  set_has_nbt();
  nbt_ = value;
}

// -------------------------------------------------------------------

// TableDataPoint

// required double X = 1;
inline bool TableDataPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableDataPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableDataPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableDataPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double TableDataPoint::x() const {
  return x_;
}
inline void TableDataPoint::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double Y = 2;
inline bool TableDataPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableDataPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableDataPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableDataPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double TableDataPoint::y() const {
  return y_;
}
inline void TableDataPoint::set_y(double value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Table

// repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
inline int Table::interp_laws_size() const {
  return interp_laws_.size();
}
inline void Table::clear_interp_laws() {
  interp_laws_.Clear();
}
inline const ::proto::endf::raw::TableInterpLaw& Table::interp_laws(int index) const {
  return interp_laws_.Get(index);
}
inline ::proto::endf::raw::TableInterpLaw* Table::mutable_interp_laws(int index) {
  return interp_laws_.Mutable(index);
}
inline ::proto::endf::raw::TableInterpLaw* Table::add_interp_laws() {
  return interp_laws_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableInterpLaw >&
Table::interp_laws() const {
  return interp_laws_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableInterpLaw >*
Table::mutable_interp_laws() {
  return &interp_laws_;
}

// repeated .proto.endf.raw.TableDataPoint data_points = 2;
inline int Table::data_points_size() const {
  return data_points_.size();
}
inline void Table::clear_data_points() {
  data_points_.Clear();
}
inline const ::proto::endf::raw::TableDataPoint& Table::data_points(int index) const {
  return data_points_.Get(index);
}
inline ::proto::endf::raw::TableDataPoint* Table::mutable_data_points(int index) {
  return data_points_.Mutable(index);
}
inline ::proto::endf::raw::TableDataPoint* Table::add_data_points() {
  return data_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableDataPoint >&
Table::data_points() const {
  return data_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::TableDataPoint >*
Table::mutable_data_points() {
  return &data_points_;
}

// -------------------------------------------------------------------

// BreitWigner

// required double ER = 1;
inline bool BreitWigner::has_er() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BreitWigner::set_has_er() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BreitWigner::clear_has_er() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BreitWigner::clear_er() {
  er_ = 0;
  clear_has_er();
}
inline double BreitWigner::er() const {
  return er_;
}
inline void BreitWigner::set_er(double value) {
  set_has_er();
  er_ = value;
}

// required double AJ = 2;
inline bool BreitWigner::has_aj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BreitWigner::set_has_aj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BreitWigner::clear_has_aj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BreitWigner::clear_aj() {
  aj_ = 0;
  clear_has_aj();
}
inline double BreitWigner::aj() const {
  return aj_;
}
inline void BreitWigner::set_aj(double value) {
  set_has_aj();
  aj_ = value;
}

// required double GT = 3;
inline bool BreitWigner::has_gt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BreitWigner::set_has_gt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BreitWigner::clear_has_gt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BreitWigner::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
inline double BreitWigner::gt() const {
  return gt_;
}
inline void BreitWigner::set_gt(double value) {
  set_has_gt();
  gt_ = value;
}

// required double GN = 4;
inline bool BreitWigner::has_gn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BreitWigner::set_has_gn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BreitWigner::clear_has_gn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BreitWigner::clear_gn() {
  gn_ = 0;
  clear_has_gn();
}
inline double BreitWigner::gn() const {
  return gn_;
}
inline void BreitWigner::set_gn(double value) {
  set_has_gn();
  gn_ = value;
}

// required double GG = 5;
inline bool BreitWigner::has_gg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BreitWigner::set_has_gg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BreitWigner::clear_has_gg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BreitWigner::clear_gg() {
  gg_ = 0;
  clear_has_gg();
}
inline double BreitWigner::gg() const {
  return gg_;
}
inline void BreitWigner::set_gg(double value) {
  set_has_gg();
  gg_ = value;
}

// required double GF = 6;
inline bool BreitWigner::has_gf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BreitWigner::set_has_gf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BreitWigner::clear_has_gf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BreitWigner::clear_gf() {
  gf_ = 0;
  clear_has_gf();
}
inline double BreitWigner::gf() const {
  return gf_;
}
inline void BreitWigner::set_gf(double value) {
  set_has_gf();
  gf_ = value;
}

// -------------------------------------------------------------------

// ReichMoore

// required double ER = 1;
inline bool ReichMoore::has_er() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReichMoore::set_has_er() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReichMoore::clear_has_er() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReichMoore::clear_er() {
  er_ = 0;
  clear_has_er();
}
inline double ReichMoore::er() const {
  return er_;
}
inline void ReichMoore::set_er(double value) {
  set_has_er();
  er_ = value;
}

// required double AJ = 2;
inline bool ReichMoore::has_aj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReichMoore::set_has_aj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReichMoore::clear_has_aj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReichMoore::clear_aj() {
  aj_ = 0;
  clear_has_aj();
}
inline double ReichMoore::aj() const {
  return aj_;
}
inline void ReichMoore::set_aj(double value) {
  set_has_aj();
  aj_ = value;
}

// required double GN = 3;
inline bool ReichMoore::has_gn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReichMoore::set_has_gn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReichMoore::clear_has_gn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReichMoore::clear_gn() {
  gn_ = 0;
  clear_has_gn();
}
inline double ReichMoore::gn() const {
  return gn_;
}
inline void ReichMoore::set_gn(double value) {
  set_has_gn();
  gn_ = value;
}

// required double GG = 4;
inline bool ReichMoore::has_gg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReichMoore::set_has_gg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReichMoore::clear_has_gg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReichMoore::clear_gg() {
  gg_ = 0;
  clear_has_gg();
}
inline double ReichMoore::gg() const {
  return gg_;
}
inline void ReichMoore::set_gg(double value) {
  set_has_gg();
  gg_ = value;
}

// required double GFA = 5;
inline bool ReichMoore::has_gfa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReichMoore::set_has_gfa() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReichMoore::clear_has_gfa() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReichMoore::clear_gfa() {
  gfa_ = 0;
  clear_has_gfa();
}
inline double ReichMoore::gfa() const {
  return gfa_;
}
inline void ReichMoore::set_gfa(double value) {
  set_has_gfa();
  gfa_ = value;
}

// required double GFB = 6;
inline bool ReichMoore::has_gfb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReichMoore::set_has_gfb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReichMoore::clear_has_gfb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReichMoore::clear_gfb() {
  gfb_ = 0;
  clear_has_gfb();
}
inline double ReichMoore::gfb() const {
  return gfb_;
}
inline void ReichMoore::set_gfb(double value) {
  set_has_gfb();
  gfb_ = value;
}

// -------------------------------------------------------------------

// Momentum

// required double AWRI = 1;
inline bool Momentum::has_awri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Momentum::set_has_awri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Momentum::clear_has_awri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Momentum::clear_awri() {
  awri_ = 0;
  clear_has_awri();
}
inline double Momentum::awri() const {
  return awri_;
}
inline void Momentum::set_awri(double value) {
  set_has_awri();
  awri_ = value;
}

// required double QX = 2;
inline bool Momentum::has_qx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Momentum::set_has_qx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Momentum::clear_has_qx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Momentum::clear_qx() {
  qx_ = 0;
  clear_has_qx();
}
inline double Momentum::qx() const {
  return qx_;
}
inline void Momentum::set_qx(double value) {
  set_has_qx();
  qx_ = value;
}

// required double L = 3;
inline bool Momentum::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Momentum::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Momentum::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Momentum::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double Momentum::l() const {
  return l_;
}
inline void Momentum::set_l(double value) {
  set_has_l();
  l_ = value;
}

// required int64 LRX = 4;
inline bool Momentum::has_lrx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Momentum::set_has_lrx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Momentum::clear_has_lrx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Momentum::clear_lrx() {
  lrx_ = GOOGLE_LONGLONG(0);
  clear_has_lrx();
}
inline ::google::protobuf::int64 Momentum::lrx() const {
  return lrx_;
}
inline void Momentum::set_lrx(::google::protobuf::int64 value) {
  set_has_lrx();
  lrx_ = value;
}

// required double APL = 5;
inline bool Momentum::has_apl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Momentum::set_has_apl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Momentum::clear_has_apl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Momentum::clear_apl() {
  apl_ = 0;
  clear_has_apl();
}
inline double Momentum::apl() const {
  return apl_;
}
inline void Momentum::set_apl(double value) {
  set_has_apl();
  apl_ = value;
}

// repeated .proto.endf.raw.BreitWigner BWTables = 6;
inline int Momentum::bwtables_size() const {
  return bwtables_.size();
}
inline void Momentum::clear_bwtables() {
  bwtables_.Clear();
}
inline const ::proto::endf::raw::BreitWigner& Momentum::bwtables(int index) const {
  return bwtables_.Get(index);
}
inline ::proto::endf::raw::BreitWigner* Momentum::mutable_bwtables(int index) {
  return bwtables_.Mutable(index);
}
inline ::proto::endf::raw::BreitWigner* Momentum::add_bwtables() {
  return bwtables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::BreitWigner >&
Momentum::bwtables() const {
  return bwtables_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::BreitWigner >*
Momentum::mutable_bwtables() {
  return &bwtables_;
}

// repeated .proto.endf.raw.ReichMoore RMTables = 7;
inline int Momentum::rmtables_size() const {
  return rmtables_.size();
}
inline void Momentum::clear_rmtables() {
  rmtables_.Clear();
}
inline const ::proto::endf::raw::ReichMoore& Momentum::rmtables(int index) const {
  return rmtables_.Get(index);
}
inline ::proto::endf::raw::ReichMoore* Momentum::mutable_rmtables(int index) {
  return rmtables_.Mutable(index);
}
inline ::proto::endf::raw::ReichMoore* Momentum::add_rmtables() {
  return rmtables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::ReichMoore >&
Momentum::rmtables() const {
  return rmtables_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::ReichMoore >*
Momentum::mutable_rmtables() {
  return &rmtables_;
}

// -------------------------------------------------------------------

// Range

// required double EL = 1;
inline bool Range::has_el() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_el() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_el() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_el() {
  el_ = 0;
  clear_has_el();
}
inline double Range::el() const {
  return el_;
}
inline void Range::set_el(double value) {
  set_has_el();
  el_ = value;
}

// required double EH = 2;
inline bool Range::has_eh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_eh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_eh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_eh() {
  eh_ = 0;
  clear_has_eh();
}
inline double Range::eh() const {
  return eh_;
}
inline void Range::set_eh(double value) {
  set_has_eh();
  eh_ = value;
}

// required int64 LRU = 3;
inline bool Range::has_lru() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Range::set_has_lru() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Range::clear_has_lru() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Range::clear_lru() {
  lru_ = GOOGLE_LONGLONG(0);
  clear_has_lru();
}
inline ::google::protobuf::int64 Range::lru() const {
  return lru_;
}
inline void Range::set_lru(::google::protobuf::int64 value) {
  set_has_lru();
  lru_ = value;
}

// required int64 LRF = 4;
inline bool Range::has_lrf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Range::set_has_lrf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Range::clear_has_lrf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Range::clear_lrf() {
  lrf_ = GOOGLE_LONGLONG(0);
  clear_has_lrf();
}
inline ::google::protobuf::int64 Range::lrf() const {
  return lrf_;
}
inline void Range::set_lrf(::google::protobuf::int64 value) {
  set_has_lrf();
  lrf_ = value;
}

// required int64 NRO = 5;
inline bool Range::has_nro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Range::set_has_nro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Range::clear_has_nro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Range::clear_nro() {
  nro_ = GOOGLE_LONGLONG(0);
  clear_has_nro();
}
inline ::google::protobuf::int64 Range::nro() const {
  return nro_;
}
inline void Range::set_nro(::google::protobuf::int64 value) {
  set_has_nro();
  nro_ = value;
}

// required int64 NAPS = 6;
inline bool Range::has_naps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Range::set_has_naps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Range::clear_has_naps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Range::clear_naps() {
  naps_ = GOOGLE_LONGLONG(0);
  clear_has_naps();
}
inline ::google::protobuf::int64 Range::naps() const {
  return naps_;
}
inline void Range::set_naps(::google::protobuf::int64 value) {
  set_has_naps();
  naps_ = value;
}

// required double SPI = 11;
inline bool Range::has_spi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Range::set_has_spi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Range::clear_has_spi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Range::clear_spi() {
  spi_ = 0;
  clear_has_spi();
}
inline double Range::spi() const {
  return spi_;
}
inline void Range::set_spi(double value) {
  set_has_spi();
  spi_ = value;
}

// required double AP = 12;
inline bool Range::has_ap() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Range::set_has_ap() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Range::clear_has_ap() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Range::clear_ap() {
  ap_ = 0;
  clear_has_ap();
}
inline double Range::ap() const {
  return ap_;
}
inline void Range::set_ap(double value) {
  set_has_ap();
  ap_ = value;
}

// required .proto.endf.raw.Table APE = 13;
inline bool Range::has_ape() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Range::set_has_ape() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Range::clear_has_ape() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Range::clear_ape() {
  if (ape_ != NULL) ape_->::proto::endf::raw::Table::Clear();
  clear_has_ape();
}
inline const ::proto::endf::raw::Table& Range::ape() const {
  return ape_ != NULL ? *ape_ : *default_instance_->ape_;
}
inline ::proto::endf::raw::Table* Range::mutable_ape() {
  set_has_ape();
  if (ape_ == NULL) ape_ = new ::proto::endf::raw::Table;
  return ape_;
}
inline ::proto::endf::raw::Table* Range::release_ape() {
  clear_has_ape();
  ::proto::endf::raw::Table* temp = ape_;
  ape_ = NULL;
  return temp;
}
inline void Range::set_allocated_ape(::proto::endf::raw::Table* ape) {
  delete ape_;
  ape_ = ape;
  if (ape) {
    set_has_ape();
  } else {
    clear_has_ape();
  }
}

// required int64 LAD = 14;
inline bool Range::has_lad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Range::set_has_lad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Range::clear_has_lad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Range::clear_lad() {
  lad_ = GOOGLE_LONGLONG(0);
  clear_has_lad();
}
inline ::google::protobuf::int64 Range::lad() const {
  return lad_;
}
inline void Range::set_lad(::google::protobuf::int64 value) {
  set_has_lad();
  lad_ = value;
}

// required int64 NLSC = 15;
inline bool Range::has_nlsc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Range::set_has_nlsc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Range::clear_has_nlsc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Range::clear_nlsc() {
  nlsc_ = GOOGLE_LONGLONG(0);
  clear_has_nlsc();
}
inline ::google::protobuf::int64 Range::nlsc() const {
  return nlsc_;
}
inline void Range::set_nlsc(::google::protobuf::int64 value) {
  set_has_nlsc();
  nlsc_ = value;
}

// required int64 LI = 21;
inline bool Range::has_li() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Range::set_has_li() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Range::clear_has_li() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Range::clear_li() {
  li_ = GOOGLE_LONGLONG(0);
  clear_has_li();
}
inline ::google::protobuf::int64 Range::li() const {
  return li_;
}
inline void Range::set_li(::google::protobuf::int64 value) {
  set_has_li();
  li_ = value;
}

// required int64 NX = 22;
inline bool Range::has_nx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Range::set_has_nx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Range::clear_has_nx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Range::clear_nx() {
  nx_ = GOOGLE_LONGLONG(0);
  clear_has_nx();
}
inline ::google::protobuf::int64 Range::nx() const {
  return nx_;
}
inline void Range::set_nx(::google::protobuf::int64 value) {
  set_has_nx();
  nx_ = value;
}

// required double AWRI = 23;
inline bool Range::has_awri() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Range::set_has_awri() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Range::clear_has_awri() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Range::clear_awri() {
  awri_ = 0;
  clear_has_awri();
}
inline double Range::awri() const {
  return awri_;
}
inline void Range::set_awri(double value) {
  set_has_awri();
  awri_ = value;
}

// required int64 LSSF = 31;
inline bool Range::has_lssf() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Range::set_has_lssf() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Range::clear_has_lssf() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Range::clear_lssf() {
  lssf_ = GOOGLE_LONGLONG(0);
  clear_has_lssf();
}
inline ::google::protobuf::int64 Range::lssf() const {
  return lssf_;
}
inline void Range::set_lssf(::google::protobuf::int64 value) {
  set_has_lssf();
  lssf_ = value;
}

// repeated double URRBES = 32;
inline int Range::urrbes_size() const {
  return urrbes_.size();
}
inline void Range::clear_urrbes() {
  urrbes_.Clear();
}
inline double Range::urrbes(int index) const {
  return urrbes_.Get(index);
}
inline void Range::set_urrbes(int index, double value) {
  urrbes_.Set(index, value);
}
inline void Range::add_urrbes(double value) {
  urrbes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Range::urrbes() const {
  return urrbes_;
}
inline ::google::protobuf::RepeatedField< double >*
Range::mutable_urrbes() {
  return &urrbes_;
}

// repeated .proto.endf.raw.Momentum moments = 61;
inline int Range::moments_size() const {
  return moments_.size();
}
inline void Range::clear_moments() {
  moments_.Clear();
}
inline const ::proto::endf::raw::Momentum& Range::moments(int index) const {
  return moments_.Get(index);
}
inline ::proto::endf::raw::Momentum* Range::mutable_moments(int index) {
  return moments_.Mutable(index);
}
inline ::proto::endf::raw::Momentum* Range::add_moments() {
  return moments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Momentum >&
Range::moments() const {
  return moments_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Momentum >*
Range::mutable_moments() {
  return &moments_;
}

// -------------------------------------------------------------------

// Resonance

// required int64 ZAI = 1;
inline bool Resonance::has_zai() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resonance::set_has_zai() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resonance::clear_has_zai() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resonance::clear_zai() {
  zai_ = GOOGLE_LONGLONG(0);
  clear_has_zai();
}
inline ::google::protobuf::int64 Resonance::zai() const {
  return zai_;
}
inline void Resonance::set_zai(::google::protobuf::int64 value) {
  set_has_zai();
  zai_ = value;
}

// required double ABN = 2;
inline bool Resonance::has_abn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resonance::set_has_abn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resonance::clear_has_abn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resonance::clear_abn() {
  abn_ = 0;
  clear_has_abn();
}
inline double Resonance::abn() const {
  return abn_;
}
inline void Resonance::set_abn(double value) {
  set_has_abn();
  abn_ = value;
}

// required int64 LFW = 3;
inline bool Resonance::has_lfw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resonance::set_has_lfw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Resonance::clear_has_lfw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Resonance::clear_lfw() {
  lfw_ = GOOGLE_LONGLONG(0);
  clear_has_lfw();
}
inline ::google::protobuf::int64 Resonance::lfw() const {
  return lfw_;
}
inline void Resonance::set_lfw(::google::protobuf::int64 value) {
  set_has_lfw();
  lfw_ = value;
}

// repeated .proto.endf.raw.Range ranges = 8;
inline int Resonance::ranges_size() const {
  return ranges_.size();
}
inline void Resonance::clear_ranges() {
  ranges_.Clear();
}
inline const ::proto::endf::raw::Range& Resonance::ranges(int index) const {
  return ranges_.Get(index);
}
inline ::proto::endf::raw::Range* Resonance::mutable_ranges(int index) {
  return ranges_.Mutable(index);
}
inline ::proto::endf::raw::Range* Resonance::add_ranges() {
  return ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Range >&
Resonance::ranges() const {
  return ranges_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Range >*
Resonance::mutable_ranges() {
  return &ranges_;
}

// -------------------------------------------------------------------

// NeutronData

// required int64 ZA = 1;
inline bool NeutronData::has_za() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeutronData::set_has_za() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeutronData::clear_has_za() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeutronData::clear_za() {
  za_ = GOOGLE_LONGLONG(0);
  clear_has_za();
}
inline ::google::protobuf::int64 NeutronData::za() const {
  return za_;
}
inline void NeutronData::set_za(::google::protobuf::int64 value) {
  set_has_za();
  za_ = value;
}

// required double AWR = 2;
inline bool NeutronData::has_awr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeutronData::set_has_awr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeutronData::clear_has_awr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeutronData::clear_awr() {
  awr_ = 0;
  clear_has_awr();
}
inline double NeutronData::awr() const {
  return awr_;
}
inline void NeutronData::set_awr(double value) {
  set_has_awr();
  awr_ = value;
}

// required double TEMPK = 3;
inline bool NeutronData::has_tempk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeutronData::set_has_tempk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeutronData::clear_has_tempk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeutronData::clear_tempk() {
  tempk_ = 0;
  clear_has_tempk();
}
inline double NeutronData::tempk() const {
  return tempk_;
}
inline void NeutronData::set_tempk(double value) {
  set_has_tempk();
  tempk_ = value;
}

// repeated .proto.endf.raw.Resonance resonances = 8;
inline int NeutronData::resonances_size() const {
  return resonances_.size();
}
inline void NeutronData::clear_resonances() {
  resonances_.Clear();
}
inline const ::proto::endf::raw::Resonance& NeutronData::resonances(int index) const {
  return resonances_.Get(index);
}
inline ::proto::endf::raw::Resonance* NeutronData::mutable_resonances(int index) {
  return resonances_.Mutable(index);
}
inline ::proto::endf::raw::Resonance* NeutronData::add_resonances() {
  return resonances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Resonance >&
NeutronData::resonances() const {
  return resonances_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::endf::raw::Resonance >*
NeutronData::mutable_resonances() {
  return &resonances_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raw
}  // namespace endf
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ENDFRAW_2eproto__INCLUDED
