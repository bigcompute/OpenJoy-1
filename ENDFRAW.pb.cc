// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ENDFRAW.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ENDFRAW.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace endf {
namespace raw {

namespace {

const ::google::protobuf::Descriptor* TableInterpLaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInterpLaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableDataPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableDataPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* BreitWigner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BreitWigner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReichMoore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReichMoore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Momentum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Momentum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resonance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resonance_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeutronData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeutronData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ENDFRAW_2eproto() {
  protobuf_AddDesc_ENDFRAW_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ENDFRAW.proto");
  GOOGLE_CHECK(file != NULL);
  TableInterpLaw_descriptor_ = file->message_type(0);
  static const int TableInterpLaw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInterpLaw, int__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInterpLaw, nbt_),
  };
  TableInterpLaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInterpLaw_descriptor_,
      TableInterpLaw::default_instance_,
      TableInterpLaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInterpLaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInterpLaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInterpLaw));
  TableDataPoint_descriptor_ = file->message_type(1);
  static const int TableDataPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataPoint, y_),
  };
  TableDataPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableDataPoint_descriptor_,
      TableDataPoint::default_instance_,
      TableDataPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableDataPoint));
  Table_descriptor_ = file->message_type(2);
  static const int Table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, interp_laws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, data_points_),
  };
  Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Table));
  BreitWigner_descriptor_ = file->message_type(3);
  static const int BreitWigner_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, er_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, aj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, gt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, gn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, gg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, gf_),
  };
  BreitWigner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BreitWigner_descriptor_,
      BreitWigner::default_instance_,
      BreitWigner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreitWigner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BreitWigner));
  ReichMoore_descriptor_ = file->message_type(4);
  static const int ReichMoore_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, er_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, aj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, gn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, gg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, gfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, gfb_),
  };
  ReichMoore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReichMoore_descriptor_,
      ReichMoore::default_instance_,
      ReichMoore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReichMoore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReichMoore));
  Momentum_descriptor_ = file->message_type(5);
  static const int Momentum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, awri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, qx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, lrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, apl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, bwtables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, rmtables_),
  };
  Momentum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Momentum_descriptor_,
      Momentum::default_instance_,
      Momentum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Momentum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Momentum));
  Range_descriptor_ = file->message_type(6);
  static const int Range_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, el_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, eh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, lru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, lrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, nro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, naps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, spi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, ape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, lad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, nlsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, li_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, nx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, awri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, lssf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, urrbes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, moments_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  Resonance_descriptor_ = file->message_type(7);
  static const int Resonance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, zai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, abn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, lfw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, ranges_),
  };
  Resonance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resonance_descriptor_,
      Resonance::default_instance_,
      Resonance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resonance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resonance));
  NeutronData_descriptor_ = file->message_type(8);
  static const int NeutronData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, za_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, awr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, tempk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, resonances_),
  };
  NeutronData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeutronData_descriptor_,
      NeutronData::default_instance_,
      NeutronData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeutronData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeutronData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ENDFRAW_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInterpLaw_descriptor_, &TableInterpLaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableDataPoint_descriptor_, &TableDataPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BreitWigner_descriptor_, &BreitWigner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReichMoore_descriptor_, &ReichMoore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Momentum_descriptor_, &Momentum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resonance_descriptor_, &Resonance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeutronData_descriptor_, &NeutronData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ENDFRAW_2eproto() {
  delete TableInterpLaw::default_instance_;
  delete TableInterpLaw_reflection_;
  delete TableDataPoint::default_instance_;
  delete TableDataPoint_reflection_;
  delete Table::default_instance_;
  delete Table_reflection_;
  delete BreitWigner::default_instance_;
  delete BreitWigner_reflection_;
  delete ReichMoore::default_instance_;
  delete ReichMoore_reflection_;
  delete Momentum::default_instance_;
  delete Momentum_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete Resonance::default_instance_;
  delete Resonance_reflection_;
  delete NeutronData::default_instance_;
  delete NeutronData_reflection_;
}

void protobuf_AddDesc_ENDFRAW_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rENDFRAW.proto\022\016proto.endf.raw\"*\n\016Table"
    "InterpLaw\022\013\n\003INT\030\001 \002(\003\022\013\n\003NBT\030\002 \002(\003\"&\n\016T"
    "ableDataPoint\022\t\n\001X\030\001 \002(\001\022\t\n\001Y\030\002 \002(\001\"q\n\005T"
    "able\0223\n\013interp_laws\030\001 \003(\0132\036.proto.endf.r"
    "aw.TableInterpLaw\0223\n\013data_points\030\002 \003(\0132\036"
    ".proto.endf.raw.TableDataPoint\"U\n\013BreitW"
    "igner\022\n\n\002ER\030\001 \002(\001\022\n\n\002AJ\030\002 \002(\001\022\n\n\002GT\030\003 \002("
    "\001\022\n\n\002GN\030\004 \002(\001\022\n\n\002GG\030\005 \002(\001\022\n\n\002GF\030\006 \002(\001\"V\n"
    "\nReichMoore\022\n\n\002ER\030\001 \002(\001\022\n\n\002AJ\030\002 \002(\001\022\n\n\002G"
    "N\030\003 \002(\001\022\n\n\002GG\030\004 \002(\001\022\013\n\003GFA\030\005 \002(\001\022\013\n\003GFB\030"
    "\006 \002(\001\"\246\001\n\010Momentum\022\014\n\004AWRI\030\001 \002(\001\022\n\n\002QX\030\002"
    " \002(\001\022\t\n\001L\030\003 \002(\001\022\013\n\003LRX\030\004 \002(\003\022\013\n\003APL\030\005 \002("
    "\001\022-\n\010BWTables\030\006 \003(\0132\033.proto.endf.raw.Bre"
    "itWigner\022,\n\010RMTables\030\007 \003(\0132\032.proto.endf."
    "raw.ReichMoore\"\233\002\n\005Range\022\n\n\002EL\030\001 \002(\001\022\n\n\002"
    "EH\030\002 \002(\001\022\013\n\003LRU\030\003 \002(\003\022\013\n\003LRF\030\004 \002(\003\022\013\n\003NR"
    "O\030\005 \002(\003\022\014\n\004NAPS\030\006 \002(\003\022\013\n\003SPI\030\013 \002(\001\022\n\n\002AP"
    "\030\014 \002(\001\022\"\n\003APE\030\r \002(\0132\025.proto.endf.raw.Tab"
    "le\022\013\n\003LAD\030\016 \002(\003\022\014\n\004NLSC\030\017 \002(\003\022\n\n\002LI\030\025 \002("
    "\003\022\n\n\002NX\030\026 \002(\003\022\014\n\004AWRI\030\027 \002(\001\022\014\n\004LSSF\030\037 \002("
    "\003\022\016\n\006URRBES\030  \003(\001\022)\n\007moments\030= \003(\0132\030.pro"
    "to.endf.raw.Momentum\"Y\n\tResonance\022\013\n\003ZAI"
    "\030\001 \002(\003\022\013\n\003ABN\030\002 \002(\001\022\013\n\003LFW\030\003 \002(\003\022%\n\006rang"
    "es\030\010 \003(\0132\025.proto.endf.raw.Range\"d\n\013Neutr"
    "onData\022\n\n\002ZA\030\001 \002(\003\022\013\n\003AWR\030\002 \002(\001\022\r\n\005TEMPK"
    "\030\003 \002(\001\022-\n\nresonances\030\010 \003(\0132\031.proto.endf."
    "raw.Resonance", 1053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ENDFRAW.proto", &protobuf_RegisterTypes);
  TableInterpLaw::default_instance_ = new TableInterpLaw();
  TableDataPoint::default_instance_ = new TableDataPoint();
  Table::default_instance_ = new Table();
  BreitWigner::default_instance_ = new BreitWigner();
  ReichMoore::default_instance_ = new ReichMoore();
  Momentum::default_instance_ = new Momentum();
  Range::default_instance_ = new Range();
  Resonance::default_instance_ = new Resonance();
  NeutronData::default_instance_ = new NeutronData();
  TableInterpLaw::default_instance_->InitAsDefaultInstance();
  TableDataPoint::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  BreitWigner::default_instance_->InitAsDefaultInstance();
  ReichMoore::default_instance_->InitAsDefaultInstance();
  Momentum::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  Resonance::default_instance_->InitAsDefaultInstance();
  NeutronData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ENDFRAW_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ENDFRAW_2eproto {
  StaticDescriptorInitializer_ENDFRAW_2eproto() {
    protobuf_AddDesc_ENDFRAW_2eproto();
  }
} static_descriptor_initializer_ENDFRAW_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TableInterpLaw::kINTFieldNumber;
const int TableInterpLaw::kNBTFieldNumber;
#endif  // !_MSC_VER

TableInterpLaw::TableInterpLaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInterpLaw::InitAsDefaultInstance() {
}

TableInterpLaw::TableInterpLaw(const TableInterpLaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInterpLaw::SharedCtor() {
  _cached_size_ = 0;
  int__ = GOOGLE_LONGLONG(0);
  nbt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInterpLaw::~TableInterpLaw() {
  SharedDtor();
}

void TableInterpLaw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableInterpLaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInterpLaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInterpLaw_descriptor_;
}

const TableInterpLaw& TableInterpLaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

TableInterpLaw* TableInterpLaw::default_instance_ = NULL;

TableInterpLaw* TableInterpLaw::New() const {
  return new TableInterpLaw;
}

void TableInterpLaw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int__ = GOOGLE_LONGLONG(0);
    nbt_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInterpLaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 INT = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NBT;
        break;
      }

      // required int64 NBT = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NBT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nbt_)));
          set_has_nbt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInterpLaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 INT = 1;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int_(), output);
  }

  // required int64 NBT = 2;
  if (has_nbt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nbt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInterpLaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 INT = 1;
  if (has_int_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int_(), target);
  }

  // required int64 NBT = 2;
  if (has_nbt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nbt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInterpLaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 INT = 1;
    if (has_int_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_());
    }

    // required int64 NBT = 2;
    if (has_nbt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nbt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInterpLaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInterpLaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInterpLaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInterpLaw::MergeFrom(const TableInterpLaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_nbt()) {
      set_nbt(from.nbt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInterpLaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInterpLaw::CopyFrom(const TableInterpLaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInterpLaw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TableInterpLaw::Swap(TableInterpLaw* other) {
  if (other != this) {
    std::swap(int__, other->int__);
    std::swap(nbt_, other->nbt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInterpLaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInterpLaw_descriptor_;
  metadata.reflection = TableInterpLaw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableDataPoint::kXFieldNumber;
const int TableDataPoint::kYFieldNumber;
#endif  // !_MSC_VER

TableDataPoint::TableDataPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableDataPoint::InitAsDefaultInstance() {
}

TableDataPoint::TableDataPoint(const TableDataPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableDataPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableDataPoint::~TableDataPoint() {
  SharedDtor();
}

void TableDataPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableDataPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDataPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableDataPoint_descriptor_;
}

const TableDataPoint& TableDataPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

TableDataPoint* TableDataPoint::default_instance_ = NULL;

TableDataPoint* TableDataPoint::New() const {
  return new TableDataPoint;
}

void TableDataPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableDataPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Y;
        break;
      }

      // required double Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableDataPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableDataPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableDataPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double X = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double Y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDataPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableDataPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableDataPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableDataPoint::MergeFrom(const TableDataPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableDataPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDataPoint::CopyFrom(const TableDataPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TableDataPoint::Swap(TableDataPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableDataPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableDataPoint_descriptor_;
  metadata.reflection = TableDataPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Table::kInterpLawsFieldNumber;
const int Table::kDataPointsFieldNumber;
#endif  // !_MSC_VER

Table::Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Table::InitAsDefaultInstance() {
}

Table::Table(const Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table::~Table() {
  SharedDtor();
}

void Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New() const {
  return new Table;
}

void Table::Clear() {
  interp_laws_.Clear();
  data_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interp_laws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interp_laws()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_interp_laws;
        if (input->ExpectTag(18)) goto parse_data_points;
        break;
      }

      // repeated .proto.endf.raw.TableDataPoint data_points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
  for (int i = 0; i < this->interp_laws_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interp_laws(i), output);
  }

  // repeated .proto.endf.raw.TableDataPoint data_points = 2;
  for (int i = 0; i < this->data_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
  for (int i = 0; i < this->interp_laws_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->interp_laws(i), target);
  }

  // repeated .proto.endf.raw.TableDataPoint data_points = 2;
  for (int i = 0; i < this->data_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Table::ByteSize() const {
  int total_size = 0;

  // repeated .proto.endf.raw.TableInterpLaw interp_laws = 1;
  total_size += 1 * this->interp_laws_size();
  for (int i = 0; i < this->interp_laws_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interp_laws(i));
  }

  // repeated .proto.endf.raw.TableDataPoint data_points = 2;
  total_size += 1 * this->data_points_size();
  for (int i = 0; i < this->data_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  interp_laws_.MergeFrom(from.interp_laws_);
  data_points_.MergeFrom(from.data_points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {

  for (int i = 0; i < interp_laws_size(); i++) {
    if (!this->interp_laws(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_points_size(); i++) {
    if (!this->data_points(i).IsInitialized()) return false;
  }
  return true;
}

void Table::Swap(Table* other) {
  if (other != this) {
    interp_laws_.Swap(&other->interp_laws_);
    data_points_.Swap(&other->data_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BreitWigner::kERFieldNumber;
const int BreitWigner::kAJFieldNumber;
const int BreitWigner::kGTFieldNumber;
const int BreitWigner::kGNFieldNumber;
const int BreitWigner::kGGFieldNumber;
const int BreitWigner::kGFFieldNumber;
#endif  // !_MSC_VER

BreitWigner::BreitWigner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BreitWigner::InitAsDefaultInstance() {
}

BreitWigner::BreitWigner(const BreitWigner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BreitWigner::SharedCtor() {
  _cached_size_ = 0;
  er_ = 0;
  aj_ = 0;
  gt_ = 0;
  gn_ = 0;
  gg_ = 0;
  gf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreitWigner::~BreitWigner() {
  SharedDtor();
}

void BreitWigner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BreitWigner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreitWigner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BreitWigner_descriptor_;
}

const BreitWigner& BreitWigner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

BreitWigner* BreitWigner::default_instance_ = NULL;

BreitWigner* BreitWigner::New() const {
  return new BreitWigner;
}

void BreitWigner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    er_ = 0;
    aj_ = 0;
    gt_ = 0;
    gn_ = 0;
    gg_ = 0;
    gf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BreitWigner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ER = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &er_)));
          set_has_er();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_AJ;
        break;
      }

      // required double AJ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aj_)));
          set_has_aj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_GT;
        break;
      }

      // required double GT = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gt_)));
          set_has_gt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_GN;
        break;
      }

      // required double GN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gn_)));
          set_has_gn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_GG;
        break;
      }

      // required double GG = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gg_)));
          set_has_gg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_GF;
        break;
      }

      // required double GF = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gf_)));
          set_has_gf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BreitWigner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double ER = 1;
  if (has_er()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->er(), output);
  }

  // required double AJ = 2;
  if (has_aj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->aj(), output);
  }

  // required double GT = 3;
  if (has_gt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gt(), output);
  }

  // required double GN = 4;
  if (has_gn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gn(), output);
  }

  // required double GG = 5;
  if (has_gg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gg(), output);
  }

  // required double GF = 6;
  if (has_gf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BreitWigner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double ER = 1;
  if (has_er()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->er(), target);
  }

  // required double AJ = 2;
  if (has_aj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->aj(), target);
  }

  // required double GT = 3;
  if (has_gt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gt(), target);
  }

  // required double GN = 4;
  if (has_gn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gn(), target);
  }

  // required double GG = 5;
  if (has_gg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gg(), target);
  }

  // required double GF = 6;
  if (has_gf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BreitWigner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ER = 1;
    if (has_er()) {
      total_size += 1 + 8;
    }

    // required double AJ = 2;
    if (has_aj()) {
      total_size += 1 + 8;
    }

    // required double GT = 3;
    if (has_gt()) {
      total_size += 1 + 8;
    }

    // required double GN = 4;
    if (has_gn()) {
      total_size += 1 + 8;
    }

    // required double GG = 5;
    if (has_gg()) {
      total_size += 1 + 8;
    }

    // required double GF = 6;
    if (has_gf()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreitWigner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BreitWigner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BreitWigner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BreitWigner::MergeFrom(const BreitWigner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_er()) {
      set_er(from.er());
    }
    if (from.has_aj()) {
      set_aj(from.aj());
    }
    if (from.has_gt()) {
      set_gt(from.gt());
    }
    if (from.has_gn()) {
      set_gn(from.gn());
    }
    if (from.has_gg()) {
      set_gg(from.gg());
    }
    if (from.has_gf()) {
      set_gf(from.gf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BreitWigner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreitWigner::CopyFrom(const BreitWigner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreitWigner::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BreitWigner::Swap(BreitWigner* other) {
  if (other != this) {
    std::swap(er_, other->er_);
    std::swap(aj_, other->aj_);
    std::swap(gt_, other->gt_);
    std::swap(gn_, other->gn_);
    std::swap(gg_, other->gg_);
    std::swap(gf_, other->gf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BreitWigner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BreitWigner_descriptor_;
  metadata.reflection = BreitWigner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReichMoore::kERFieldNumber;
const int ReichMoore::kAJFieldNumber;
const int ReichMoore::kGNFieldNumber;
const int ReichMoore::kGGFieldNumber;
const int ReichMoore::kGFAFieldNumber;
const int ReichMoore::kGFBFieldNumber;
#endif  // !_MSC_VER

ReichMoore::ReichMoore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReichMoore::InitAsDefaultInstance() {
}

ReichMoore::ReichMoore(const ReichMoore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReichMoore::SharedCtor() {
  _cached_size_ = 0;
  er_ = 0;
  aj_ = 0;
  gn_ = 0;
  gg_ = 0;
  gfa_ = 0;
  gfb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReichMoore::~ReichMoore() {
  SharedDtor();
}

void ReichMoore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReichMoore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReichMoore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReichMoore_descriptor_;
}

const ReichMoore& ReichMoore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

ReichMoore* ReichMoore::default_instance_ = NULL;

ReichMoore* ReichMoore::New() const {
  return new ReichMoore;
}

void ReichMoore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    er_ = 0;
    aj_ = 0;
    gn_ = 0;
    gg_ = 0;
    gfa_ = 0;
    gfb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReichMoore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ER = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &er_)));
          set_has_er();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_AJ;
        break;
      }

      // required double AJ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aj_)));
          set_has_aj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_GN;
        break;
      }

      // required double GN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gn_)));
          set_has_gn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_GG;
        break;
      }

      // required double GG = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gg_)));
          set_has_gg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_GFA;
        break;
      }

      // required double GFA = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GFA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gfa_)));
          set_has_gfa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_GFB;
        break;
      }

      // required double GFB = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GFB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gfb_)));
          set_has_gfb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReichMoore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double ER = 1;
  if (has_er()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->er(), output);
  }

  // required double AJ = 2;
  if (has_aj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->aj(), output);
  }

  // required double GN = 3;
  if (has_gn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gn(), output);
  }

  // required double GG = 4;
  if (has_gg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gg(), output);
  }

  // required double GFA = 5;
  if (has_gfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gfa(), output);
  }

  // required double GFB = 6;
  if (has_gfb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gfb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReichMoore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double ER = 1;
  if (has_er()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->er(), target);
  }

  // required double AJ = 2;
  if (has_aj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->aj(), target);
  }

  // required double GN = 3;
  if (has_gn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gn(), target);
  }

  // required double GG = 4;
  if (has_gg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gg(), target);
  }

  // required double GFA = 5;
  if (has_gfa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gfa(), target);
  }

  // required double GFB = 6;
  if (has_gfb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gfb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReichMoore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ER = 1;
    if (has_er()) {
      total_size += 1 + 8;
    }

    // required double AJ = 2;
    if (has_aj()) {
      total_size += 1 + 8;
    }

    // required double GN = 3;
    if (has_gn()) {
      total_size += 1 + 8;
    }

    // required double GG = 4;
    if (has_gg()) {
      total_size += 1 + 8;
    }

    // required double GFA = 5;
    if (has_gfa()) {
      total_size += 1 + 8;
    }

    // required double GFB = 6;
    if (has_gfb()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReichMoore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReichMoore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReichMoore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReichMoore::MergeFrom(const ReichMoore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_er()) {
      set_er(from.er());
    }
    if (from.has_aj()) {
      set_aj(from.aj());
    }
    if (from.has_gn()) {
      set_gn(from.gn());
    }
    if (from.has_gg()) {
      set_gg(from.gg());
    }
    if (from.has_gfa()) {
      set_gfa(from.gfa());
    }
    if (from.has_gfb()) {
      set_gfb(from.gfb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReichMoore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReichMoore::CopyFrom(const ReichMoore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReichMoore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ReichMoore::Swap(ReichMoore* other) {
  if (other != this) {
    std::swap(er_, other->er_);
    std::swap(aj_, other->aj_);
    std::swap(gn_, other->gn_);
    std::swap(gg_, other->gg_);
    std::swap(gfa_, other->gfa_);
    std::swap(gfb_, other->gfb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReichMoore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReichMoore_descriptor_;
  metadata.reflection = ReichMoore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Momentum::kAWRIFieldNumber;
const int Momentum::kQXFieldNumber;
const int Momentum::kLFieldNumber;
const int Momentum::kLRXFieldNumber;
const int Momentum::kAPLFieldNumber;
const int Momentum::kBWTablesFieldNumber;
const int Momentum::kRMTablesFieldNumber;
#endif  // !_MSC_VER

Momentum::Momentum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Momentum::InitAsDefaultInstance() {
}

Momentum::Momentum(const Momentum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Momentum::SharedCtor() {
  _cached_size_ = 0;
  awri_ = 0;
  qx_ = 0;
  l_ = 0;
  lrx_ = GOOGLE_LONGLONG(0);
  apl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Momentum::~Momentum() {
  SharedDtor();
}

void Momentum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Momentum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Momentum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Momentum_descriptor_;
}

const Momentum& Momentum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

Momentum* Momentum::default_instance_ = NULL;

Momentum* Momentum::New() const {
  return new Momentum;
}

void Momentum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awri_ = 0;
    qx_ = 0;
    l_ = 0;
    lrx_ = GOOGLE_LONGLONG(0);
    apl_ = 0;
  }
  bwtables_.Clear();
  rmtables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Momentum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double AWRI = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &awri_)));
          set_has_awri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_QX;
        break;
      }

      // required double QX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_QX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qx_)));
          set_has_qx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_L;
        break;
      }

      // required double L = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_L:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LRX;
        break;
      }

      // required int64 LRX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lrx_)));
          set_has_lrx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_APL;
        break;
      }

      // required double APL = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_APL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &apl_)));
          set_has_apl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_BWTables;
        break;
      }

      // repeated .proto.endf.raw.BreitWigner BWTables = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BWTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bwtables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_BWTables;
        if (input->ExpectTag(58)) goto parse_RMTables;
        break;
      }

      // repeated .proto.endf.raw.ReichMoore RMTables = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RMTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rmtables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RMTables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Momentum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double AWRI = 1;
  if (has_awri()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->awri(), output);
  }

  // required double QX = 2;
  if (has_qx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qx(), output);
  }

  // required double L = 3;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->l(), output);
  }

  // required int64 LRX = 4;
  if (has_lrx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lrx(), output);
  }

  // required double APL = 5;
  if (has_apl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->apl(), output);
  }

  // repeated .proto.endf.raw.BreitWigner BWTables = 6;
  for (int i = 0; i < this->bwtables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bwtables(i), output);
  }

  // repeated .proto.endf.raw.ReichMoore RMTables = 7;
  for (int i = 0; i < this->rmtables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rmtables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Momentum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double AWRI = 1;
  if (has_awri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->awri(), target);
  }

  // required double QX = 2;
  if (has_qx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qx(), target);
  }

  // required double L = 3;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->l(), target);
  }

  // required int64 LRX = 4;
  if (has_lrx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lrx(), target);
  }

  // required double APL = 5;
  if (has_apl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->apl(), target);
  }

  // repeated .proto.endf.raw.BreitWigner BWTables = 6;
  for (int i = 0; i < this->bwtables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bwtables(i), target);
  }

  // repeated .proto.endf.raw.ReichMoore RMTables = 7;
  for (int i = 0; i < this->rmtables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rmtables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Momentum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double AWRI = 1;
    if (has_awri()) {
      total_size += 1 + 8;
    }

    // required double QX = 2;
    if (has_qx()) {
      total_size += 1 + 8;
    }

    // required double L = 3;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // required int64 LRX = 4;
    if (has_lrx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lrx());
    }

    // required double APL = 5;
    if (has_apl()) {
      total_size += 1 + 8;
    }

  }
  // repeated .proto.endf.raw.BreitWigner BWTables = 6;
  total_size += 1 * this->bwtables_size();
  for (int i = 0; i < this->bwtables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bwtables(i));
  }

  // repeated .proto.endf.raw.ReichMoore RMTables = 7;
  total_size += 1 * this->rmtables_size();
  for (int i = 0; i < this->rmtables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rmtables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Momentum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Momentum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Momentum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Momentum::MergeFrom(const Momentum& from) {
  GOOGLE_CHECK_NE(&from, this);
  bwtables_.MergeFrom(from.bwtables_);
  rmtables_.MergeFrom(from.rmtables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awri()) {
      set_awri(from.awri());
    }
    if (from.has_qx()) {
      set_qx(from.qx());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_lrx()) {
      set_lrx(from.lrx());
    }
    if (from.has_apl()) {
      set_apl(from.apl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Momentum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Momentum::CopyFrom(const Momentum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Momentum::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < bwtables_size(); i++) {
    if (!this->bwtables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rmtables_size(); i++) {
    if (!this->rmtables(i).IsInitialized()) return false;
  }
  return true;
}

void Momentum::Swap(Momentum* other) {
  if (other != this) {
    std::swap(awri_, other->awri_);
    std::swap(qx_, other->qx_);
    std::swap(l_, other->l_);
    std::swap(lrx_, other->lrx_);
    std::swap(apl_, other->apl_);
    bwtables_.Swap(&other->bwtables_);
    rmtables_.Swap(&other->rmtables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Momentum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Momentum_descriptor_;
  metadata.reflection = Momentum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kELFieldNumber;
const int Range::kEHFieldNumber;
const int Range::kLRUFieldNumber;
const int Range::kLRFFieldNumber;
const int Range::kNROFieldNumber;
const int Range::kNAPSFieldNumber;
const int Range::kSPIFieldNumber;
const int Range::kAPFieldNumber;
const int Range::kAPEFieldNumber;
const int Range::kLADFieldNumber;
const int Range::kNLSCFieldNumber;
const int Range::kLIFieldNumber;
const int Range::kNXFieldNumber;
const int Range::kAWRIFieldNumber;
const int Range::kLSSFFieldNumber;
const int Range::kURRBESFieldNumber;
const int Range::kMomentsFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Range::InitAsDefaultInstance() {
  ape_ = const_cast< ::proto::endf::raw::Table*>(&::proto::endf::raw::Table::default_instance());
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  el_ = 0;
  eh_ = 0;
  lru_ = GOOGLE_LONGLONG(0);
  lrf_ = GOOGLE_LONGLONG(0);
  nro_ = GOOGLE_LONGLONG(0);
  naps_ = GOOGLE_LONGLONG(0);
  spi_ = 0;
  ap_ = 0;
  ape_ = NULL;
  lad_ = GOOGLE_LONGLONG(0);
  nlsc_ = GOOGLE_LONGLONG(0);
  li_ = GOOGLE_LONGLONG(0);
  nx_ = GOOGLE_LONGLONG(0);
  awri_ = 0;
  lssf_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
    delete ape_;
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    el_ = 0;
    eh_ = 0;
    lru_ = GOOGLE_LONGLONG(0);
    lrf_ = GOOGLE_LONGLONG(0);
    nro_ = GOOGLE_LONGLONG(0);
    naps_ = GOOGLE_LONGLONG(0);
    spi_ = 0;
    ap_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ape()) {
      if (ape_ != NULL) ape_->::proto::endf::raw::Table::Clear();
    }
    lad_ = GOOGLE_LONGLONG(0);
    nlsc_ = GOOGLE_LONGLONG(0);
    li_ = GOOGLE_LONGLONG(0);
    nx_ = GOOGLE_LONGLONG(0);
    awri_ = 0;
    lssf_ = GOOGLE_LONGLONG(0);
  }
  urrbes_.Clear();
  moments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double EL = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &el_)));
          set_has_el();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_EH;
        break;
      }

      // required double EH = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eh_)));
          set_has_eh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LRU;
        break;
      }

      // required int64 LRU = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lru_)));
          set_has_lru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LRF;
        break;
      }

      // required int64 LRF = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LRF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lrf_)));
          set_has_lrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NRO;
        break;
      }

      // required int64 NRO = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NRO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nro_)));
          set_has_nro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_NAPS;
        break;
      }

      // required int64 NAPS = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NAPS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &naps_)));
          set_has_naps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_SPI;
        break;
      }

      // required double SPI = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spi_)));
          set_has_spi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_AP;
        break;
      }

      // required double AP = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_APE;
        break;
      }

      // required .proto.endf.raw.Table APE = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_APE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_LAD;
        break;
      }

      // required int64 LAD = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LAD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lad_)));
          set_has_lad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_NLSC;
        break;
      }

      // required int64 NLSC = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NLSC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlsc_)));
          set_has_nlsc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_LI;
        break;
      }

      // required int64 LI = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &li_)));
          set_has_li();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_NX;
        break;
      }

      // required int64 NX = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nx_)));
          set_has_nx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_AWRI;
        break;
      }

      // required double AWRI = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AWRI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &awri_)));
          set_has_awri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_LSSF;
        break;
      }

      // required int64 LSSF = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LSSF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lssf_)));
          set_has_lssf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_URRBES;
        break;
      }

      // repeated double URRBES = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_URRBES:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 257, input, this->mutable_urrbes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_urrbes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_URRBES;
        if (input->ExpectTag(490)) goto parse_moments;
        break;
      }

      // repeated .proto.endf.raw.Momentum moments = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_moments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double EL = 1;
  if (has_el()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->el(), output);
  }

  // required double EH = 2;
  if (has_eh()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eh(), output);
  }

  // required int64 LRU = 3;
  if (has_lru()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lru(), output);
  }

  // required int64 LRF = 4;
  if (has_lrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lrf(), output);
  }

  // required int64 NRO = 5;
  if (has_nro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nro(), output);
  }

  // required int64 NAPS = 6;
  if (has_naps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->naps(), output);
  }

  // required double SPI = 11;
  if (has_spi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->spi(), output);
  }

  // required double AP = 12;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ap(), output);
  }

  // required .proto.endf.raw.Table APE = 13;
  if (has_ape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->ape(), output);
  }

  // required int64 LAD = 14;
  if (has_lad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->lad(), output);
  }

  // required int64 NLSC = 15;
  if (has_nlsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->nlsc(), output);
  }

  // required int64 LI = 21;
  if (has_li()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->li(), output);
  }

  // required int64 NX = 22;
  if (has_nx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->nx(), output);
  }

  // required double AWRI = 23;
  if (has_awri()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->awri(), output);
  }

  // required int64 LSSF = 31;
  if (has_lssf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->lssf(), output);
  }

  // repeated double URRBES = 32;
  for (int i = 0; i < this->urrbes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      32, this->urrbes(i), output);
  }

  // repeated .proto.endf.raw.Momentum moments = 61;
  for (int i = 0; i < this->moments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->moments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double EL = 1;
  if (has_el()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->el(), target);
  }

  // required double EH = 2;
  if (has_eh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eh(), target);
  }

  // required int64 LRU = 3;
  if (has_lru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lru(), target);
  }

  // required int64 LRF = 4;
  if (has_lrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lrf(), target);
  }

  // required int64 NRO = 5;
  if (has_nro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nro(), target);
  }

  // required int64 NAPS = 6;
  if (has_naps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->naps(), target);
  }

  // required double SPI = 11;
  if (has_spi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->spi(), target);
  }

  // required double AP = 12;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ap(), target);
  }

  // required .proto.endf.raw.Table APE = 13;
  if (has_ape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->ape(), target);
  }

  // required int64 LAD = 14;
  if (has_lad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->lad(), target);
  }

  // required int64 NLSC = 15;
  if (has_nlsc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->nlsc(), target);
  }

  // required int64 LI = 21;
  if (has_li()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->li(), target);
  }

  // required int64 NX = 22;
  if (has_nx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->nx(), target);
  }

  // required double AWRI = 23;
  if (has_awri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->awri(), target);
  }

  // required int64 LSSF = 31;
  if (has_lssf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->lssf(), target);
  }

  // repeated double URRBES = 32;
  for (int i = 0; i < this->urrbes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(32, this->urrbes(i), target);
  }

  // repeated .proto.endf.raw.Momentum moments = 61;
  for (int i = 0; i < this->moments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->moments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double EL = 1;
    if (has_el()) {
      total_size += 1 + 8;
    }

    // required double EH = 2;
    if (has_eh()) {
      total_size += 1 + 8;
    }

    // required int64 LRU = 3;
    if (has_lru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lru());
    }

    // required int64 LRF = 4;
    if (has_lrf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lrf());
    }

    // required int64 NRO = 5;
    if (has_nro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nro());
    }

    // required int64 NAPS = 6;
    if (has_naps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->naps());
    }

    // required double SPI = 11;
    if (has_spi()) {
      total_size += 1 + 8;
    }

    // required double AP = 12;
    if (has_ap()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .proto.endf.raw.Table APE = 13;
    if (has_ape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ape());
    }

    // required int64 LAD = 14;
    if (has_lad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lad());
    }

    // required int64 NLSC = 15;
    if (has_nlsc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nlsc());
    }

    // required int64 LI = 21;
    if (has_li()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->li());
    }

    // required int64 NX = 22;
    if (has_nx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nx());
    }

    // required double AWRI = 23;
    if (has_awri()) {
      total_size += 2 + 8;
    }

    // required int64 LSSF = 31;
    if (has_lssf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lssf());
    }

  }
  // repeated double URRBES = 32;
  {
    int data_size = 0;
    data_size = 8 * this->urrbes_size();
    total_size += 2 * this->urrbes_size() + data_size;
  }

  // repeated .proto.endf.raw.Momentum moments = 61;
  total_size += 2 * this->moments_size();
  for (int i = 0; i < this->moments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  urrbes_.MergeFrom(from.urrbes_);
  moments_.MergeFrom(from.moments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_el()) {
      set_el(from.el());
    }
    if (from.has_eh()) {
      set_eh(from.eh());
    }
    if (from.has_lru()) {
      set_lru(from.lru());
    }
    if (from.has_lrf()) {
      set_lrf(from.lrf());
    }
    if (from.has_nro()) {
      set_nro(from.nro());
    }
    if (from.has_naps()) {
      set_naps(from.naps());
    }
    if (from.has_spi()) {
      set_spi(from.spi());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ape()) {
      mutable_ape()->::proto::endf::raw::Table::MergeFrom(from.ape());
    }
    if (from.has_lad()) {
      set_lad(from.lad());
    }
    if (from.has_nlsc()) {
      set_nlsc(from.nlsc());
    }
    if (from.has_li()) {
      set_li(from.li());
    }
    if (from.has_nx()) {
      set_nx(from.nx());
    }
    if (from.has_awri()) {
      set_awri(from.awri());
    }
    if (from.has_lssf()) {
      set_lssf(from.lssf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  if (has_ape()) {
    if (!this->ape().IsInitialized()) return false;
  }
  for (int i = 0; i < moments_size(); i++) {
    if (!this->moments(i).IsInitialized()) return false;
  }
  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(el_, other->el_);
    std::swap(eh_, other->eh_);
    std::swap(lru_, other->lru_);
    std::swap(lrf_, other->lrf_);
    std::swap(nro_, other->nro_);
    std::swap(naps_, other->naps_);
    std::swap(spi_, other->spi_);
    std::swap(ap_, other->ap_);
    std::swap(ape_, other->ape_);
    std::swap(lad_, other->lad_);
    std::swap(nlsc_, other->nlsc_);
    std::swap(li_, other->li_);
    std::swap(nx_, other->nx_);
    std::swap(awri_, other->awri_);
    std::swap(lssf_, other->lssf_);
    urrbes_.Swap(&other->urrbes_);
    moments_.Swap(&other->moments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resonance::kZAIFieldNumber;
const int Resonance::kABNFieldNumber;
const int Resonance::kLFWFieldNumber;
const int Resonance::kRangesFieldNumber;
#endif  // !_MSC_VER

Resonance::Resonance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resonance::InitAsDefaultInstance() {
}

Resonance::Resonance(const Resonance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resonance::SharedCtor() {
  _cached_size_ = 0;
  zai_ = GOOGLE_LONGLONG(0);
  abn_ = 0;
  lfw_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resonance::~Resonance() {
  SharedDtor();
}

void Resonance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resonance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resonance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resonance_descriptor_;
}

const Resonance& Resonance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

Resonance* Resonance::default_instance_ = NULL;

Resonance* Resonance::New() const {
  return new Resonance;
}

void Resonance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zai_ = GOOGLE_LONGLONG(0);
    abn_ = 0;
    lfw_ = GOOGLE_LONGLONG(0);
  }
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resonance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ZAI = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zai_)));
          set_has_zai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_ABN;
        break;
      }

      // required double ABN = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ABN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abn_)));
          set_has_abn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LFW;
        break;
      }

      // required int64 LFW = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LFW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lfw_)));
          set_has_lfw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ranges;
        break;
      }

      // repeated .proto.endf.raw.Range ranges = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ranges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resonance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ZAI = 1;
  if (has_zai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->zai(), output);
  }

  // required double ABN = 2;
  if (has_abn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->abn(), output);
  }

  // required int64 LFW = 3;
  if (has_lfw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lfw(), output);
  }

  // repeated .proto.endf.raw.Range ranges = 8;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ranges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resonance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ZAI = 1;
  if (has_zai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->zai(), target);
  }

  // required double ABN = 2;
  if (has_abn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->abn(), target);
  }

  // required int64 LFW = 3;
  if (has_lfw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lfw(), target);
  }

  // repeated .proto.endf.raw.Range ranges = 8;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ranges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resonance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ZAI = 1;
    if (has_zai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zai());
    }

    // required double ABN = 2;
    if (has_abn()) {
      total_size += 1 + 8;
    }

    // required int64 LFW = 3;
    if (has_lfw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lfw());
    }

  }
  // repeated .proto.endf.raw.Range ranges = 8;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resonance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resonance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resonance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resonance::MergeFrom(const Resonance& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranges_.MergeFrom(from.ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zai()) {
      set_zai(from.zai());
    }
    if (from.has_abn()) {
      set_abn(from.abn());
    }
    if (from.has_lfw()) {
      set_lfw(from.lfw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resonance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resonance::CopyFrom(const Resonance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resonance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < ranges_size(); i++) {
    if (!this->ranges(i).IsInitialized()) return false;
  }
  return true;
}

void Resonance::Swap(Resonance* other) {
  if (other != this) {
    std::swap(zai_, other->zai_);
    std::swap(abn_, other->abn_);
    std::swap(lfw_, other->lfw_);
    ranges_.Swap(&other->ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resonance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resonance_descriptor_;
  metadata.reflection = Resonance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NeutronData::kZAFieldNumber;
const int NeutronData::kAWRFieldNumber;
const int NeutronData::kTEMPKFieldNumber;
const int NeutronData::kResonancesFieldNumber;
#endif  // !_MSC_VER

NeutronData::NeutronData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NeutronData::InitAsDefaultInstance() {
}

NeutronData::NeutronData(const NeutronData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NeutronData::SharedCtor() {
  _cached_size_ = 0;
  za_ = GOOGLE_LONGLONG(0);
  awr_ = 0;
  tempk_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeutronData::~NeutronData() {
  SharedDtor();
}

void NeutronData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeutronData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeutronData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeutronData_descriptor_;
}

const NeutronData& NeutronData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ENDFRAW_2eproto();
  return *default_instance_;
}

NeutronData* NeutronData::default_instance_ = NULL;

NeutronData* NeutronData::New() const {
  return new NeutronData;
}

void NeutronData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    za_ = GOOGLE_LONGLONG(0);
    awr_ = 0;
    tempk_ = 0;
  }
  resonances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeutronData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ZA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &za_)));
          set_has_za();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_AWR;
        break;
      }

      // required double AWR = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AWR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &awr_)));
          set_has_awr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_TEMPK;
        break;
      }

      // required double TEMPK = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TEMPK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tempk_)));
          set_has_tempk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resonances;
        break;
      }

      // repeated .proto.endf.raw.Resonance resonances = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resonances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resonances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_resonances;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NeutronData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ZA = 1;
  if (has_za()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->za(), output);
  }

  // required double AWR = 2;
  if (has_awr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->awr(), output);
  }

  // required double TEMPK = 3;
  if (has_tempk()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->tempk(), output);
  }

  // repeated .proto.endf.raw.Resonance resonances = 8;
  for (int i = 0; i < this->resonances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resonances(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NeutronData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ZA = 1;
  if (has_za()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->za(), target);
  }

  // required double AWR = 2;
  if (has_awr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->awr(), target);
  }

  // required double TEMPK = 3;
  if (has_tempk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->tempk(), target);
  }

  // repeated .proto.endf.raw.Resonance resonances = 8;
  for (int i = 0; i < this->resonances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resonances(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NeutronData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ZA = 1;
    if (has_za()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->za());
    }

    // required double AWR = 2;
    if (has_awr()) {
      total_size += 1 + 8;
    }

    // required double TEMPK = 3;
    if (has_tempk()) {
      total_size += 1 + 8;
    }

  }
  // repeated .proto.endf.raw.Resonance resonances = 8;
  total_size += 1 * this->resonances_size();
  for (int i = 0; i < this->resonances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resonances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeutronData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeutronData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeutronData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeutronData::MergeFrom(const NeutronData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resonances_.MergeFrom(from.resonances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_za()) {
      set_za(from.za());
    }
    if (from.has_awr()) {
      set_awr(from.awr());
    }
    if (from.has_tempk()) {
      set_tempk(from.tempk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeutronData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeutronData::CopyFrom(const NeutronData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeutronData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < resonances_size(); i++) {
    if (!this->resonances(i).IsInitialized()) return false;
  }
  return true;
}

void NeutronData::Swap(NeutronData* other) {
  if (other != this) {
    std::swap(za_, other->za_);
    std::swap(awr_, other->awr_);
    std::swap(tempk_, other->tempk_);
    resonances_.Swap(&other->resonances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeutronData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeutronData_descriptor_;
  metadata.reflection = NeutronData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raw
}  // namespace endf
}  // namespace proto

// @@protoc_insertion_point(global_scope)
